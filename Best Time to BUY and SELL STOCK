class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxp = 0;
        int mini = INT_MAX;
        for(int i=0; i<prices.size(); i++){
            // change the mini in order to get the minimum element of the prices as it will help in finding the maxp
            mini = min(mini, prices[i]);
            // then we will take the max difference between the elements and the min element (mini)
            maxp = max(maxp, prices[i] - mini);
        }
        return maxp;
    }
};


// ANOTHER SOLUTION //

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int l = 0,r=1;
        int maxp = 0;
        
        while(r<prices.size()){
            if(prices[l]<prices[r]){
                int profit = prices[r] - prices[l];
                maxp = max(maxp, profit);
            } else {
                // we will jump the l pointer to the r pointer location as that point will be the lowers
                l = r;
            }
            r++;
        }
        return maxp;
    }
};
