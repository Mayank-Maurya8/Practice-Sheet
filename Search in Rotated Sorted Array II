class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int n = nums.size(); 
        int l = 0, r=n-1;
        while(l<=r){
            // int m = (l+r) >> 1;
            int m = l + (r-l)/2;
            if(nums[m] == target)
                return true;
                
            // for edge cases [1,0,1,1,1] target = 0;
            //The idea is to keep two pointers l = 0 , r = n-1
            //And increase l untill it is the last occurance of nums[0]
            //decrease r untill it is no longer equals nums[0]
            //eg : 1,1,1,1,0,1,1,1,1,1 reduces to 1,0
            
            else if(nums[l] == nums[m] && nums[m]== nums[r] ){
                l++;r--;
            }
            else if(nums[l] <= nums[m]){
                if(target<nums[m] && target>=nums[l])
                    r = m-1;
                else
                    l = m+1;
            }
            else if(nums[m] <= nums[r]) {
                if(target<=nums[r] && target>nums[m])
                    l = m+1;
                else
                    r = m-1;
            } 
            else {
                l++;
            }
        }
        return false;
    }
};
