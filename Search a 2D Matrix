class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        // here we first check the target in comparison with the columns to find the suitable row 
        // then perform bs in that row to find the target
        int mrow = matrix.size(), mcol = matrix[0].size();
        int top = 0, bot = mrow -1;
        while(top <= bot){
            int srow = (top + bot)/2;
            // we compare the target with the search rows last and starting element 
            if(target > matrix[srow][mcol-1])
                top = srow + 1;
            else if(target < matrix[srow][0])
                bot = srow -1;
            else
                break;
            // we break the loop when we are able to find the row in which we will get the target 
        }
        // return false when we are unable to find the appropriate row
        if (top > bot){
            return false;
        }
        // now apply bs in the row 
        int srow = (top+bot)/2;
        int l = 0, r = mcol -1;
        while(l<=r){
            int m = (l+r) /2;
            if(target < matrix[srow][m])
                r = m-1;
            else if(target > matrix[srow][m])
                l = m+1;
            else 
                return true;
        }
        return false;
    }
};
